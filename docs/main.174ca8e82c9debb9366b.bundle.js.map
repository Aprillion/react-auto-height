{"version":3,"file":"main.174ca8e82c9debb9366b.bundle.js","sources":["webpack:///./src/index.jsx"],"sourcesContent":["import React, {memo, useEffect, useRef} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './index.css'\r\n\r\nconst PREV_HEIGHT = 'data-react-auto-height-start-value'\r\nconst AutoHeight = ({children, className, ...props}) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    const {current: el} = ref\r\n    if (!el) {\r\n      return\r\n    }\r\n\r\n    // find descendants created by nested AutoHeights and adjust future height of current element by the future heights of children\r\n    // skip for first render\r\n    let adjustBy = 0\r\n    if (el.style.height) {\r\n      el.setAttribute(PREV_HEIGHT, el.style.height)\r\n      let descendants = Array.from(el.firstChild.children)\r\n      for (let child of descendants) {\r\n        let prevHeight = child.getAttribute(PREV_HEIGHT)\r\n        if (prevHeight) {\r\n          child = child.firstChild // skip the outer wrapper\r\n          adjustBy += child.scrollHeight - parseInt(prevHeight)\r\n        }\r\n        if (child.children && child.children.length) {\r\n          Array.from(child.children).forEach(grandChild => {\r\n            if (grandChild.getAttribute) {\r\n              descendants.push(grandChild)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    el.style.height = el.firstChild.scrollHeight + adjustBy + 'px'\r\n  })\r\n\r\n  // inner div used in el.firstChild\r\n  return (\r\n    <div ref={ref} className={`react-auto-height ${className}`} {...props}>\r\n      <div>{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(AutoHeight)\r\n\r\nAutoHeight.propTypes = {\r\n  children: PropTypes.node,\r\n  /** Props are propagated to the outer wrapper div - including style, className, data-test-id, ... */\r\n  '...props': PropTypes.string,\r\n}\r\n"],"mappings":"AAIA","sourceRoot":""}